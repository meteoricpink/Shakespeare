# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oIt7HQE7WdxmfzQoxD6S4gxGEOD84L_K
"""

# Part 1: Get Shakespeareâ€™s sonnets
import requests
import json

def fetch_sonnets():
    url = "https://poetrydb.org/author,title/Shakespeare;Sonnet"
    response = requests.get(url)
    sonnets = json.loads(response.text)
    return sonnets

sonnets_data = fetch_sonnets()

# Part 2, 3, 4: Sonnet class with tokenization and stemming
import re
from nltk.stem import PorterStemmer

class Sonnet:
    def __init__(self, sonnet_dict):
        self.id = int(sonnet_dict['title'].split()[1].rstrip(':'))
        self.title = sonnet_dict['title'].split(':')[1].strip()
        self.lines = sonnet_dict['lines']
        self.stemmer = PorterStemmer()

    def __str__(self):
        return f"Sonnet {self.id}: {self.title}\n" + "\n".join(self.lines)

    def tokenize(self):
        text = ' '.join(self.lines)
        tokens = re.findall(r'\b\w+\b', text.lower())
        stemmed_tokens = [self.stemmer.stem(token) for token in tokens]
        return stemmed_tokens

sonnets = [Sonnet(sonnet) for sonnet in sonnets_data]

# Example usage
example_sonnet = sonnets[0]  # Taking the first sonnet as an example
print(example_sonnet)  # Displaying the sonnet
print(example_sonnet.tokenize())  # Displaying tokenized and stemmed words

# Part 5: Build an Inverted Index
class Index:
    def __init__(self, sonnets):
        self.inverted_index = {}
        self.build_index(sonnets)

    def build_index(self, sonnets):
        for sonnet in sonnets:
            tokens = sonnet.tokenize()
            for token in tokens:
                if token not in self.inverted_index:
                    self.inverted_index[token] = []
                self.inverted_index[token].append(sonnet.id)

# Part 6: Implementing Search Functionality
class Index(Index):
    def search(self, query):
        query_tokens = query.lower().split()
        results = set()
        for token in query_tokens:
            if token in self.inverted_index:
                results.update(self.inverted_index[token])
        return list(results)

# Building the index
index = Index(sonnets)

# Example search
search_results = index.search("world")
print(f"Sonnets containing 'world': {search_results}")

# Part 7: User Interface for Querying
class Query:
    def __init__(self, index):
        self.index = index

    def search(self, query):
        results = self.index.search(query)
        if not results:
            print("No matching sonnets found.")
        else:
            print("Matching Sonnets:")
            for result in results:
                sonnet = sonnets[result - 1]  # Sonnet IDs are 1-based
                print(f"Sonnet {sonnet.id}: {sonnet.title}")

# Part 8: Simple User Interface
def user_interface():
    print("Welcome to the Sonnet Search Engine!")
    while True:
        user_query = input("Enter a query (or 'exit' to quit): ").strip().lower()
        if user_query == "exit":
            print("Goodbye!")
            break
        else:
            query = Query(index)
            query.search(user_query)

# Run the user interface
if __name__ == "__main__":
    user_interface()